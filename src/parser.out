Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> statement
Rule 3     statement -> IDENTIFIER EQUALS expression
Rule 4     statement -> expression
Rule 5     expression -> expression PLUS expression
Rule 6     expression -> expression MINUS expression
Rule 7     expression -> expression TIMES expression
Rule 8     expression -> expression DIVIDE expression
Rule 9     expression -> LPAREN expression RPAREN
Rule 10    expression -> IDENTIFIER
Rule 11    expression -> NUMBER

Terminals, with rules where they appear

DIVIDE               : 8
EQUALS               : 3
IDENTIFIER           : 3 10
LPAREN               : 9
MINUS                : 6
NUMBER               : 11
PLUS                 : 5
RPAREN               : 9
TIMES                : 7
error                : 

Nonterminals, with rules where they appear

expression           : 3 4 5 5 6 6 7 7 8 8 9
statement            : 1 2
statements           : 1 0

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . IDENTIFIER EQUALS expression
    (4) statement -> . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . IDENTIFIER
    (11) expression -> . NUMBER

    IDENTIFIER      shift and go to state 3
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    expression                     shift and go to state 4

state 1

    (0) S' -> statements .
    (1) statements -> statements . statement
    (3) statement -> . IDENTIFIER EQUALS expression
    (4) statement -> . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . IDENTIFIER
    (11) expression -> . NUMBER

    IDENTIFIER      shift and go to state 3
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6

    statement                      shift and go to state 7
    expression                     shift and go to state 4

state 2

    (2) statements -> statement .

    IDENTIFIER      reduce using rule 2 (statements -> statement .)
    LPAREN          reduce using rule 2 (statements -> statement .)
    NUMBER          reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)


state 3

    (3) statement -> IDENTIFIER . EQUALS expression
    (10) expression -> IDENTIFIER .

    EQUALS          shift and go to state 8
    PLUS            reduce using rule 10 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 10 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 10 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 10 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 10 (expression -> IDENTIFIER .)
    LPAREN          reduce using rule 10 (expression -> IDENTIFIER .)
    NUMBER          reduce using rule 10 (expression -> IDENTIFIER .)
    $end            reduce using rule 10 (expression -> IDENTIFIER .)


state 4

    (4) statement -> expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    IDENTIFIER      reduce using rule 4 (statement -> expression .)
    LPAREN          reduce using rule 4 (statement -> expression .)
    NUMBER          reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12


state 5

    (9) expression -> LPAREN . expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . IDENTIFIER
    (11) expression -> . NUMBER

    LPAREN          shift and go to state 5
    IDENTIFIER      shift and go to state 14
    NUMBER          shift and go to state 6

    expression                     shift and go to state 13

state 6

    (11) expression -> NUMBER .

    PLUS            reduce using rule 11 (expression -> NUMBER .)
    MINUS           reduce using rule 11 (expression -> NUMBER .)
    TIMES           reduce using rule 11 (expression -> NUMBER .)
    DIVIDE          reduce using rule 11 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 11 (expression -> NUMBER .)
    LPAREN          reduce using rule 11 (expression -> NUMBER .)
    NUMBER          reduce using rule 11 (expression -> NUMBER .)
    $end            reduce using rule 11 (expression -> NUMBER .)
    RPAREN          reduce using rule 11 (expression -> NUMBER .)


state 7

    (1) statements -> statements statement .

    IDENTIFIER      reduce using rule 1 (statements -> statements statement .)
    LPAREN          reduce using rule 1 (statements -> statements statement .)
    NUMBER          reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)


state 8

    (3) statement -> IDENTIFIER EQUALS . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . IDENTIFIER
    (11) expression -> . NUMBER

    LPAREN          shift and go to state 5
    IDENTIFIER      shift and go to state 14
    NUMBER          shift and go to state 6

    expression                     shift and go to state 15

state 9

    (5) expression -> expression PLUS . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . IDENTIFIER
    (11) expression -> . NUMBER

    LPAREN          shift and go to state 5
    IDENTIFIER      shift and go to state 14
    NUMBER          shift and go to state 6

    expression                     shift and go to state 16

state 10

    (6) expression -> expression MINUS . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . IDENTIFIER
    (11) expression -> . NUMBER

    LPAREN          shift and go to state 5
    IDENTIFIER      shift and go to state 14
    NUMBER          shift and go to state 6

    expression                     shift and go to state 17

state 11

    (7) expression -> expression TIMES . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . IDENTIFIER
    (11) expression -> . NUMBER

    LPAREN          shift and go to state 5
    IDENTIFIER      shift and go to state 14
    NUMBER          shift and go to state 6

    expression                     shift and go to state 18

state 12

    (8) expression -> expression DIVIDE . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . IDENTIFIER
    (11) expression -> . NUMBER

    LPAREN          shift and go to state 5
    IDENTIFIER      shift and go to state 14
    NUMBER          shift and go to state 6

    expression                     shift and go to state 19

state 13

    (9) expression -> LPAREN expression . RPAREN
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 20
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12


state 14

    (10) expression -> IDENTIFIER .

    RPAREN          reduce using rule 10 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 10 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 10 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 10 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 10 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 10 (expression -> IDENTIFIER .)
    LPAREN          reduce using rule 10 (expression -> IDENTIFIER .)
    NUMBER          reduce using rule 10 (expression -> IDENTIFIER .)
    $end            reduce using rule 10 (expression -> IDENTIFIER .)


state 15

    (3) statement -> IDENTIFIER EQUALS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    IDENTIFIER      reduce using rule 3 (statement -> IDENTIFIER EQUALS expression .)
    LPAREN          reduce using rule 3 (statement -> IDENTIFIER EQUALS expression .)
    NUMBER          reduce using rule 3 (statement -> IDENTIFIER EQUALS expression .)
    $end            reduce using rule 3 (statement -> IDENTIFIER EQUALS expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12


state 16

    (5) expression -> expression PLUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 5 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 5 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 5 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 5 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 5 (expression -> expression PLUS expression .)
    $end            reduce using rule 5 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 5 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12

  ! TIMES           [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 17

    (6) expression -> expression MINUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 6 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 6 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 6 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 6 (expression -> expression MINUS expression .)
    $end            reduce using rule 6 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 6 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12

  ! TIMES           [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 18

    (7) expression -> expression TIMES expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 7 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 7 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 7 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 7 (expression -> expression TIMES expression .)
    IDENTIFIER      reduce using rule 7 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 7 (expression -> expression TIMES expression .)
    NUMBER          reduce using rule 7 (expression -> expression TIMES expression .)
    $end            reduce using rule 7 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 7 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]


state 19

    (8) expression -> expression DIVIDE expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 8 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 8 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 8 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 8 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 8 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 8 (expression -> expression DIVIDE expression .)
    NUMBER          reduce using rule 8 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 8 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 8 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]


state 20

    (9) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (expression -> LPAREN expression RPAREN .)

